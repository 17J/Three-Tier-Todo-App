trigger:
  none  # Manual trigger, modify to 'main' if you want CI on push

# Using a self-hosted agent named 'DEV'
pool:
  name: DEV

variables:
  SONARQUBE_ENDPOINT: 'SonarQubeServiceConnection'
  SNYK_TOKEN: $(SNYK_TOKEN)
  GITLEAKS_VERSION: '8.17.0'
  BUILD_TAG: $(Build.BuildId)




stages:

# ─────────────────────────────────────────────────────────────
# Stage 1: Maven Compile (Backend)
# ─────────────────────────────────────────────────────────────
- stage: compile
  displayName: '🔧 Backend Maven Compile'
  jobs:
    - job: maven_compile
      displayName: '🔨 Compile Java Backend Code'
      steps:
        - task: Maven@4
          inputs:
            azureSubscription: 'Free Trial(9245e272-a223-4574-b55d-5c4353e70a28)'
            mavenPomFile: 'backend/pom.xml'
            goals: 'compile'
            publishJUnitResults: true
            testResultsFiles: '**/surefire-reports/TEST-*.xml'
            javaHomeOption: 'JDKVersion'
            mavenVersionOption: 'Default'

# ─────────────────────────────────────────────────────────────
# Stage 2: Maven Test
# ─────────────────────────────────────────────────────────────
- stage: test
  displayName: '🧪 Backend Maven Unit Tests'
  jobs:
    - job: maven_test
      displayName: '🧪 Run Tests for Backend'
      steps:
        - task: Maven@4
          inputs:
            azureSubscription: 'Free Trial(9245e272-a223-4574-b55d-5c4353e70a28)'
            mavenPomFile: 'backend/pom.xml'
            goals: 'test'
            publishJUnitResults: true
            testResultsFiles: '**/surefire-reports/TEST-*.xml'
            javaHomeOption: 'JDKVersion'
            mavenVersionOption: 'Default'

# ─────────────────────────────────────────────────────────────
# Stage 3: NPM Install (Frontend)
# ─────────────────────────────────────────────────────────────
- stage: npm_install
  displayName: '🌐 Frontend NPM Install'
  jobs:
    - job: frontend_npm_install
      displayName: '📦 Install Frontend Dependencies'
      steps:
        - task: Npm@1
          inputs:
            command: 'install'
            workingDir: 'frontend/'

# ─────────────────────────────────────────────────────────────
# Stage 4. Code Quality - SonarQube
# ─────────────────────────────────────────────────────────────
- stage: sonar
  displayName: '🔍 Code Quality - SonarQube'
  jobs:
    - job: sonar_analysis
      steps:
        - task: SonarQubePrepare@5
          inputs:
            SonarQube: $(SONARQUBE_ENDPOINT)
            scannerMode: 'CLI'
            configMode: 'manual'
            cliProjectKey: 'demo-backend'
            cliProjectName: 'Demo Backend'
            cliSources: 'backend'

        - task: Maven@4
          inputs:
            mavenPomFile: 'backend/pom.xml'
            goals: 'verify'

        - task: SonarQubeAnalyze@5
        - task: SonarQubePublish@5
          inputs:
            pollingTimeoutSec: '300'

# ─────────────────────────────────────────────────────────────
# Stage 5. Security - Gitleaks
# ─────────────────────────────────────────────────────────────
- stage: gitleaks
  displayName: '🕵️ Gitleaks Secret Scan'
  jobs:
    - job: gitleaks_scan
      steps:
        - script: |
            curl -sSL https://github.com/zricethezav/gitleaks/releases/download/v$(GITLEAKS_VERSION)/gitleaks_$(GITLEAKS_VERSION)_linux_x64.tar.gz | tar -xz
            ./gitleaks detect --source . --report-format sarif --report-path gitleaks-report.sarif
          displayName: 'Run Gitleaks'

# ─────────────────────────────────────────────────────────────
# Stage 6. Security - OWASP Dependency-Check
# ─────────────────────────────────────────────────────────────
- stage: owasp
  displayName: '🛡️ OWASP Dependency Check'
  jobs:
    - job: owasp_scan
      steps:
        - script: |
            curl -sLO https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.10/dependency-check-9.0.10-release.zip
            unzip dependency-check-*.zip
            ./dependency-check/bin/dependency-check.sh --project "backend" --scan backend --format HTML --out dependency-report
          displayName: 'Run OWASP Dependency-Check'

# ─────────────────────────────────────────────────────────────
# Stage 7. Security - Snyk
# ─────────────────────────────────────────────────────────────
- stage: snyk
  displayName: '🧬 Snyk Vulnerability Scan'
  jobs:
    - job: snyk_scan
      steps:
        - task: UseNode@1
          inputs:
            version: '16.x'
        - script: |
            npm install -g snyk
            snyk auth $(SNYK_TOKEN)
            snyk test --file=backend/pom.xml --all-projects
          displayName: 'Run Snyk Scan'

# ─────────────────────────────────────────────────────────────
# Stage 8. Security - Trivy
# ─────────────────────────────────────────────────────────────
- stage: trivy
  displayName: '🧯 Trivy Repo Scan'
  jobs:
    - job: trivy_repo_scan
      steps:
        - script: |
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
            ./trivy fs . --format table --severity HIGH,CRITICAL -o trivy-report.html
          displayName: 'Run Trivy Repo Scan'
# ─────────────────────────────────────────────────────────────
# Stage 9: Push Artifacts to Maven Feed
# ─────────────────────────────────────────────────────────────
- stage: push_artifacts
  displayName: '📦 Push Maven Artifacts'
  jobs:
    - job: push_to_feed
      displayName: '📤 Push Backend Artifacts to Azure Artifacts'
      steps:
        - task: MavenAuthenticate@0
          inputs:
            artifactsFeeds: 'dev_mvn'
        - task: Maven@4
          inputs:
            azureSubscription: 'Free Trial(9245e272-a223-4574-b55d-5c4353e70a28)'
            mavenPomFile: 'backend/pom.xml'
            goals: 'deploy'
            publishJUnitResults: true
            testResultsFiles: '**/surefire-reports/TEST-*.xml'
            javaHomeOption: 'JDKVersion'
            mavenVersionOption: 'Default'

# ─────────────────────────────────────────────────────────────
# Stage 10: Docker Build & Push to ACR
# ─────────────────────────────────────────────────────────────
- stage: docker_build_push
  displayName: '🐳 Docker Build & Push'
  jobs:
    - job: docker_push
      displayName: '🚀 Build & Push Frontend/Backend Images'
      steps:
        - task: Docker@2
          displayName: '📤 Push Frontend Image'
          inputs:
            containerRegistry: 'devss'
            repository: 'demo/frontend'
            command: 'buildAndPush'
            Dockerfile: 'frontend/Dockerfile'
            tags: |
              $(Build.BuildId)

        - task: Docker@2
          displayName: '📤 Push Backend Image'
          inputs:
            containerRegistry: 'devss'
            repository: 'demo/backend'
            command: 'buildAndPush'
            Dockerfile: 'backend/Dockerfile'
            tags: |
              $(Build.BuildId)

# ─────────────────────────────────────────────────────────────
# Stage 11: GitOps-Based AKS Deploy (via ArgoCD - optional)
# ─────────────────────────────────────────────────────────────
# If you're using ArgoCD, update the GitOps repo instead of deploying directly.
# Uncomment this block if you want Azure DevOps to deploy directly to AKS.

- stage: aks_deploy
  displayName: '🚢 Deploy to AKS Cluster'
  jobs:
    - job: deploy_aks
      displayName: '🔧 Apply Kubernetes Manifests'
      steps:
        - task: KubernetesManifest@1
          inputs:
            action: 'deploy'
            connectionType: 'kubernetesServiceConnection'
            kubernetesServiceConnection: 'demos'
            namespace: 'default'
            manifests: |
              K8s/frontend-ds-service.yml
              K8s/db-ds-service.yml
              K8s/backend-ds-service.yml
